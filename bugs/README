Known Quirks:

* SubC grammar is ambiguous, the yacc file in the docs directory will show 
conflicts when ran in yacc or bison.

* SubC supports function pointers of the form int (*f)() but this actually means
that f is *NOT* a void function, it actually is a variadic functions.
This is not true in general that declaring f() means variadic, it actually means void
function in SubC, we emulate this behavior.

Known Bugs:
* This compiler and SubC is known to miscompile some programs, I have those in the bugs
directory. The bad-expr.c is the one where both will miscompile on.


* The SubC bootstrap compiler made by $CC in gcc/clang uses 4 bytes int, so it will
generate wrong code for x86_64 regarding numbers out of 4 bytes range like INT_MIN,
so the asm will mismatch against the compiler. However, the final scc built
from the scc0 and scc1 bootstrap will use 8 bytes int on x86_64 so that will
be correct.

Bugs fixed against SubC:

* SubC does not support passing struct/unions as values, but it allows you to
declare it in function parameters, ie, void f(struct foo x) {}
This implementation disallows declaring functions like that in general

* switch statements errors out on duplicate cases/defaults

* extern in local declarations cannot be initialized, ie, 
void f() { extern int a = 10; } is not allowed

* SubC can only index using arrays that is of int types, ie,
int a[10];
int b[2];
char x[10];
a[x[0]] does not work but a[b[0]] does work even though b[0] is generate a valid integer index
a workaround is something like a[x[0]+0] so it will promote it to an int

* SubC constant folding is wrong for right shifts

* SubC currently allows any unary ops on any types, even on structs, ie, struct file f; !f; will work 
our compiler is stricter in that it only allows it for pointer and integer types

* The darwin amd64 code generator 
void cgdefc(int c)	{ ngen("%s\t'%c", ".byte", c); } is missing a ' after %c

Bugs found in SubC library:

* the freopen.c function in the stdlib has incorrect precedence at line 20 the == will evaluate before the &
if (f->iom & (_FREAD|_FWRITE) == _FREAD|_FWRITE)
